apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.openshift.io: https://github.com/openshift/api/pull/470
    api.openshift.io/filename-cvo-runlevel: "0000_10"
    api.openshift.io/filename-operator: config-operator
    api.openshift.io/filename-ordering: "01"
    feature-gate.release.openshift.io/ExternalOIDCWithUpstreamParity: "true"
    release.openshift.io/bootstrap-required: "true"
  name: authentications.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Authentication
    listKind: AuthenticationList
    plural: authentications
    singular: authentication
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: |-
          Authentication specifies cluster-wide settings for authentication (like OAuth and
          webhook token authenticators). The canonical name of an instance is `cluster`.

          Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              oauthMetadata:
                description: |-
                  oauthMetadata contains the discovery endpoint data for OAuth 2.0
                  Authorization Server Metadata for an external OAuth server.
                  This discovery document can be viewed from its served location:
                  oc get --raw '/.well-known/oauth-authorization-server'
                  For further details, see the IETF Draft:
                  https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2
                  If oauthMetadata.name is non-empty, this value has precedence
                  over any metadata reference stored in status.
                  The key "oauthMetadata" is used to locate the data.
                  If specified and the config map or expected key is not found, no metadata is served.
                  If the specified metadata is not valid, no metadata is served.
                  The namespace for this config map is openshift-config.
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
              oidcProviders:
                description: |-
                  oidcProviders are OIDC identity providers that can issue tokens
                  for this cluster
                  Can only be set if "Type" is set to "OIDC".

                  At most one provider can be configured.
                items:
                  properties:
                    claimMappings:
                      description: |-
                        claimMappings is a required field that configures the rules to be used by
                        the Kubernetes API server for translating claims in a JWT token, issued
                        by the identity provider, to a cluster identity.
                      properties:
                        groups:
                          description: |-
                            groups is an optional field that configures how the groups of a cluster identity
                            should be constructed from the claims in a JWT token issued
                            by the identity provider.
                            When referencing a claim, if the claim is present in the JWT
                            token, its value must be a list of groups separated by a comma (',').
                            For example - '"example"' and '"exampleOne", "exampleTwo", "exampleThree"' are valid claim values.
                          properties:
                            claim:
                              description: |-
                                claim is a required field that configures the JWT token
                                claim whose value is assigned to the cluster identity
                                field associated with this mapping.
                              type: string
                            prefix:
                              description: |-
                                prefix is an optional field that configures the prefix that will be
                                applied to the cluster identity attribute during the process of mapping
                                JWT claims to cluster identity attributes.

                                When omitted (""), no prefix is applied to the cluster identity attribute.

                                Example: if `prefix` is set to "myoidc:" and the `claim` in JWT contains
                                an array of strings "a", "b" and  "c", the mapping will result in an
                                array of string "myoidc:a", "myoidc:b" and "myoidc:c".
                              type: string
                          required:
                          - claim
                          type: object
                        username:
                          description: |-
                            username is a required field that configures how the username of a cluster identity
                            should be constructed from the claims in a JWT token issued by the identity provider.
                          properties:
                            claim:
                              description: |-
                                claim is a required field that configures the JWT token
                                claim whose value is assigned to the cluster identity
                                field associated with this mapping.

                                claim must not be an empty string ("") and must not exceed 256 characters.
                              maxLength: 256
                              minLength: 1
                              type: string
                            prefix:
                              description: |-
                                prefix configures the prefix that should be prepended to the value
                                of the JWT claim.

                                prefix must be set when prefixPolicy is set to 'Prefix' and must be unset otherwise.
                              properties:
                                prefixString:
                                  description: |-
                                    prefixString is a required field that configures the prefix that will
                                    be applied to cluster identity username attribute
                                    during the process of mapping JWT claims to cluster identity attributes.

                                    prefixString must not be an empty string ("").
                                  minLength: 1
                                  type: string
                              required:
                              - prefixString
                              type: object
                            prefixPolicy:
                              description: |-
                                prefixPolicy is an optional field that configures how a prefix should be
                                applied to the value of the JWT claim specified in the 'claim' field.

                                Allowed values are 'Prefix', 'NoPrefix', and omitted (not provided or an empty string).

                                When set to 'Prefix', the value specified in the prefix field will be
                                prepended to the value of the JWT claim.
                                The prefix field must be set when prefixPolicy is 'Prefix'.

                                When set to 'NoPrefix', no prefix will be prepended to the value
                                of the JWT claim.

                                When omitted, this means no opinion and the platform is left to choose
                                any prefixes that are applied which is subject to change over time.
                                Currently, the platform prepends `{issuerURL}#` to the value of the JWT claim
                                when the claim is not 'email'.
                                As an example, consider the following scenario:
                                   `prefix` is unset, `issuerURL` is set to `https://myoidc.tld`,
                                   the JWT claims include "username":"userA" and "email":"userA@myoidc.tld",
                                   and `claim` is set to:
                                   - "username": the mapped value will be "https://myoidc.tld#userA"
                                   - "email": the mapped value will be "userA@myoidc.tld"
                              enum:
                              - ""
                              - NoPrefix
                              - Prefix
                              type: string
                          required:
                          - claim
                          type: object
                          x-kubernetes-validations:
                          - message: prefix must be set if prefixPolicy is 'Prefix',
                              but must remain unset otherwise
                            rule: 'has(self.prefixPolicy) && self.prefixPolicy ==
                              ''Prefix'' ? (has(self.prefix) && size(self.prefix.prefixString)
                              > 0) : !has(self.prefix)'
                      required:
                      - username
                      type: object
                    claimValidationRules:
                      description: |-
                        claimValidationRules is an optional field that configures the rules to
                        be used by the Kubernetes API server for validating the claims in a JWT
                        token issued by the identity provider.

                        Validation rules are joined via an AND operation.
                      items:
                        description: |-
                          TokenClaimValidationRule represents a validation rule based on token claims.
                          If type is RequiredClaim, requiredClaim must be set.
                          If type is Expression, expressionRule must be set.
                        properties:
                          expressionRule:
                            description: |-
                              expressionRule contains the configuration for the "Expression" type.
                              Must be set if type == "Expression".
                            properties:
                              expression:
                                description: |-
                                  expression is a CEL expression evaluated against token claims.
                                  The expression must be a non-empty string and no longer than 4096 characters.
                                  This field is required.
                                maxLength: 4096
                                minLength: 1
                                type: string
                              message:
                                description: |-
                                  message allows configuring the human-readable message that is returned
                                  from the Kubernetes API server when a token fails validation based on
                                  the CEL expression defined in 'expression'. This field is optional.
                                maxLength: 256
                                minLength: 1
                                type: string
                            required:
                            - expression
                            type: object
                          requiredClaim:
                            description: |-
                              requiredClaim allows configuring a required claim name and its expected value.
                              RequiredClaim is used when type is RequiredClaim.
                            properties:
                              claim:
                                description: claim is a name of a required claim.
                                  Only claims with string values are supported.
                                minLength: 1
                                type: string
                              requiredValue:
                                description: |-
                                  requiredValue is a required field that configures the value that 'claim' must
                                  have when taken from the incoming JWT claims.
                                  If the value in the JWT claims does not match, the token
                                  will be rejected for authentication.

                                  requiredValue must not be an empty string ("").
                                minLength: 1
                                type: string
                            required:
                            - claim
                            - requiredValue
                            type: object
                          type:
                            allOf:
                            - enum:
                              - RequiredClaim
                              - Expression
                            - enum:
                              - RequiredClaim
                              - Expression
                            default: RequiredClaim
                            description: |-
                              type is an optional field that configures the type of the validation rule.

                              Allowed values are "RequiredClaim" and "Expression".

                              When set to 'RequiredClaim', the Kubernetes API server will be configured
                              to validate that the incoming JWT contains the required claim and that its
                              value matches the required value.

                              When set to 'Expression', the Kubernetes API server will be configured
                              to validate the incoming JWT against the configured CEL expression.

                              Defaults to "RequiredClaim".
                            type: string
                        type: object
                        x-kubernetes-validations:
                        - message: expressionRule must be set when type is 'Expression',
                            and forbidden otherwise
                          rule: 'has(self.type) && self.type == ''Expression'' ? has(self.expressionRule)
                            : !has(self.expressionRule)'
                        - message: requiredClaim must be set when type is 'RequiredClaim',
                            and forbidden otherwise
                          rule: 'has(self.type) && self.type == ''RequiredClaim''
                            ? has(self.requiredClaim) : !has(self.requiredClaim)'
                      type: array
                      x-kubernetes-list-type: atomic
                    issuer:
                      description: |-
                        issuer is a required field that configures how the platform interacts
                        with the identity provider and how tokens issued from the identity provider
                        are evaluated by the Kubernetes API server.
                      properties:
                        audienceMatchPolicy:
                          description: |-
                            audienceMatchPolicy specifies how token audiences are matched.
                            If omitted, the system applies a default policy.
                            Valid values are:
                            - "MatchAny": The token is accepted if any of its audiences match any of the configured audiences.
                          enum:
                          - MatchAny
                          - ""
                          type: string
                        audiences:
                          description: |-
                            audiences is a required field that configures the acceptable audiences
                            the JWT token, issued by the identity provider, must be issued to.
                            At least one of the entries must match the 'aud' claim in the JWT token.

                            audiences must contain at least one entry and must not exceed ten entries.
                          items:
                            minLength: 1
                            type: string
                          maxItems: 10
                          minItems: 1
                          type: array
                          x-kubernetes-list-type: set
                        discoveryURL:
                          description: |-
                            discoveryURL is an optional field that, if specified, overrides the default discovery endpoint
                            used to retrieve OIDC configuration metadata. By default, the discovery URL is derived from `url`
                            as "{url}/.well-known/openid-configuration".

                            The discoveryURL must:
                              - Be a valid absolute URL.
                              - Use the HTTPS scheme.
                              - Not contain query parameters, user info, or fragments.
                              - Be different from the value of `url` (ignoring trailing slashes)
                          maxLength: 2048
                          type: string
                          x-kubernetes-validations:
                          - message: discoveryURL must be a valid URL
                            rule: 'self.size() > 0 ? isURL(self) : true'
                          - message: discoveryURL must be a valid https URL
                            rule: 'self.size() > 0 ? (isURL(self) && url(self).getScheme()
                              == ''https'') : true'
                          - message: discoveryURL must not contain query parameters
                            rule: self.matches('^[^?]*$')
                          - message: discoveryURL must not contain fragments
                            rule: self.matches('^[^#]*$')
                          - message: discoveryURL must not contain user info
                            rule: self.matches('^[^@]*$')
                        issuerCertificateAuthority:
                          description: |-
                            issuerCertificateAuthority is an optional field that configures the
                            certificate authority, used by the Kubernetes API server, to validate
                            the connection to the identity provider when fetching discovery information.

                            When not specified, the system trust is used.

                            When specified, it must reference a ConfigMap in the openshift-config
                            namespace containing the PEM-encoded CA certificates under the 'ca-bundle.crt'
                            key in the data field of the ConfigMap.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                config map
                              type: string
                          required:
                          - name
                          type: object
                        issuerURL:
                          description: |-
                            issuerURL is a required field that configures the URL used to issue tokens
                            by the identity provider.
                            The Kubernetes API server determines how authentication tokens should be handled
                            by matching the 'iss' claim in the JWT to the issuerURL of configured identity providers.

                            Must be at least 1 character and must not exceed 512 characters in length.
                            Must be a valid URL that uses the 'https' scheme and does not contain a query, fragment or user.
                          maxLength: 512
                          minLength: 1
                          type: string
                          x-kubernetes-validations:
                          - message: must be a valid URL
                            rule: isURL(self)
                          - message: must use the 'https' scheme
                            rule: isURL(self) && url(self).getScheme() == 'https'
                          - message: must not have a query
                            rule: isURL(self) && url(self).getQuery() == {}
                          - message: must not have a fragment
                            rule: self.find('#(.+)$') == ''
                          - message: must not have user info
                            rule: self.find('@') == ''
                      required:
                      - audiences
                      - issuerURL
                      type: object
                      x-kubernetes-validations:
                      - message: discoveryURL must be different from issuerURL
                        rule: 'self.?discoveryURL.orValue("").size() > 0 ? (self.issuerURL.size()
                          == 0 || self.discoveryURL.find(''^.+[^/]'') != self.issuerURL.find(''^.+[^/]''))
                          : true'
                    name:
                      description: |-
                        name is a required field that configures the unique human-readable identifier
                        associated with the identity provider.
                        It is used to distinguish between multiple identity providers
                        and has no impact on token validation or authentication mechanics.

                        name must not be an empty string ("").
                      minLength: 1
                      type: string
                    oidcClients:
                      description: |-
                        oidcClients is an optional field that configures how on-cluster,
                        platform clients should request tokens from the identity provider.
                        oidcClients must not exceed 20 entries and entries must have unique namespace/name pairs.
                      items:
                        description: |-
                          OIDCClientConfig configures how platform clients
                          interact with identity providers as an authentication
                          method
                        properties:
                          clientID:
                            description: |-
                              clientID is a required field that configures the client identifier, from
                              the identity provider, that the platform component uses for authentication
                              requests made to the identity provider.
                              The identity provider must accept this identifier for platform components
                              to be able to use the identity provider as an authentication mode.

                              clientID must not be an empty string ("").
                            minLength: 1
                            type: string
                          clientSecret:
                            description: |-
                              clientSecret is an optional field that configures the client secret used
                              by the platform component when making authentication requests to the identity provider.

                              When not specified, no client secret will be used when making authentication requests
                              to the identity provider.

                              When specified, clientSecret references a Secret in the 'openshift-config'
                              namespace that contains the client secret in the 'clientSecret' key of the '.data' field.
                              The client secret will be used when making authentication requests to the identity provider.

                              Public clients do not require a client secret but private
                              clients do require a client secret to work with the identity provider.
                            properties:
                              name:
                                description: name is the metadata.name of the referenced
                                  secret
                                type: string
                            required:
                            - name
                            type: object
                          componentName:
                            description: |-
                              componentName is a required field that specifies the name of the platform
                              component being configured to use the identity provider as an authentication mode.
                              It is used in combination with componentNamespace as a unique identifier.

                              componentName must not be an empty string ("") and must not exceed 256 characters in length.
                            maxLength: 256
                            minLength: 1
                            type: string
                          componentNamespace:
                            description: |-
                              componentNamespace is a required field that specifies the namespace in which the
                              platform component being configured to use the identity provider as an authentication
                              mode is running.
                              It is used in combination with componentName as a unique identifier.

                              componentNamespace must not be an empty string ("") and must not exceed 63 characters in length.
                            maxLength: 63
                            minLength: 1
                            type: string
                          extraScopes:
                            description: |-
                              extraScopes is an optional field that configures the extra scopes that should
                              be requested by the platform component when making authentication requests to the
                              identity provider.
                              This is useful if you have configured claim mappings that requires specific
                              scopes to be requested beyond the standard OIDC scopes.

                              When omitted, no additional scopes are requested.
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: set
                        required:
                        - clientID
                        - componentName
                        - componentNamespace
                        type: object
                      maxItems: 20
                      type: array
                      x-kubernetes-list-map-keys:
                      - componentNamespace
                      - componentName
                      x-kubernetes-list-type: map
                    userValidationRules:
                      description: |-
                        userValidationRules defines the set of rules used to validate claims in a user’s token.
                        These rules determine whether a token subject is considered valid based on its claims.
                        Each rule is evaluated independently.
                        See the TokenUserValidationRule type for more information on rule structure.
                      items:
                        description: |-
                          TokenUserValidationRule provides a CEL-based rule used to validate a token subject.
                          Each rule contains a CEL expression that is evaluated against the token’s claims.
                        properties:
                          expression:
                            description: |-
                              expression is a CEL expression that must evaluate
                              to true for the token to be accepted. The expression is evaluated against the token's
                              user information (e.g., username, groups).

                              If the expression evaluates to false, the token is rejected.
                              See https://kubernetes.io/docs/reference/using-api/cel/ for CEL syntax.
                              At least one rule must evaluate to true for the token to be considered valid.

                              This field must be non-empty and may not exceed 4096 characters.
                            maxLength: 4096
                            minLength: 1
                            type: string
                          message:
                            description: |-
                              message is an optional, human-readable message returned by the API server when
                              this validation rule fails. It can help clarify why a token was rejected.
                            maxLength: 256
                            minLength: 1
                            type: string
                        required:
                        - expression
                        type: object
                      maxItems: 64
                      type: array
                      x-kubernetes-list-type: atomic
                  required:
                  - claimMappings
                  - issuer
                  - name
                  type: object
                maxItems: 1
                type: array
                x-kubernetes-list-map-keys:
                - name
                x-kubernetes-list-type: map
              serviceAccountIssuer:
                description: |-
                  serviceAccountIssuer is the identifier of the bound service account token
                  issuer.
                  The default is https://kubernetes.default.svc
                  WARNING: Updating this field will not result in immediate invalidation of all bound tokens with the
                  previous issuer value. Instead, the tokens issued by previous service account issuer will continue to
                  be trusted for a time period chosen by the platform (currently set to 24h).
                  This time period is subject to change over time.
                  This allows internal components to transition to use new service account issuer without service distruption.
                type: string
              type:
                description: |-
                  type identifies the cluster managed, user facing authentication mode in use.
                  Specifically, it manages the component that responds to login attempts.
                  The default is IntegratedOAuth.
                type: string
              webhookTokenAuthenticator:
                description: |-
                  webhookTokenAuthenticator configures a remote token reviewer.
                  These remote authentication webhooks can be used to verify bearer tokens
                  via the tokenreviews.authentication.k8s.io REST API. This is required to
                  honor bearer tokens that are provisioned by an external authentication service.

                  Can only be set if "Type" is set to "None".
                properties:
                  kubeConfig:
                    description: |-
                      kubeConfig references a secret that contains kube config file data which
                      describes how to access the remote webhook service.
                      The namespace for the referenced secret is openshift-config.

                      For further details, see:

                      https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication

                      The key "kubeConfig" is used to locate the data.
                      If the secret or expected key is not found, the webhook is not honored.
                      If the specified kube config data is not valid, the webhook is not honored.
                    properties:
                      name:
                        description: name is the metadata.name of the referenced secret
                        type: string
                    required:
                    - name
                    type: object
                required:
                - kubeConfig
                type: object
              webhookTokenAuthenticators:
                description: webhookTokenAuthenticators is DEPRECATED, setting it
                  has no effect.
                items:
                  description: |-
                    deprecatedWebhookTokenAuthenticator holds the necessary configuration options for a remote token authenticator.
                    It's the same as WebhookTokenAuthenticator but it's missing the 'required' validation on KubeConfig field.
                  properties:
                    kubeConfig:
                      description: |-
                        kubeConfig contains kube config file data which describes how to access the remote webhook service.
                        For further details, see:
                        https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication
                        The key "kubeConfig" is used to locate the data.
                        If the secret or expected key is not found, the webhook is not honored.
                        If the specified kube config data is not valid, the webhook is not honored.
                        The namespace for this secret is determined by the point of use.
                      properties:
                        name:
                          description: name is the metadata.name of the referenced
                            secret
                          type: string
                      required:
                      - name
                      type: object
                  type: object
                type: array
                x-kubernetes-list-type: atomic
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            properties:
              integratedOAuthMetadata:
                description: |-
                  integratedOAuthMetadata contains the discovery endpoint data for OAuth 2.0
                  Authorization Server Metadata for the in-cluster integrated OAuth server.
                  This discovery document can be viewed from its served location:
                  oc get --raw '/.well-known/oauth-authorization-server'
                  For further details, see the IETF Draft:
                  https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2
                  This contains the observed value based on cluster state.
                  An explicitly set value in spec.oauthMetadata has precedence over this field.
                  This field has no meaning if authentication spec.type is not set to IntegratedOAuth.
                  The key "oauthMetadata" is used to locate the data.
                  If the config map or expected key is not found, no metadata is served.
                  If the specified metadata is not valid, no metadata is served.
                  The namespace for this config map is openshift-config-managed.
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
            type: object
        required:
        - spec
        type: object
        x-kubernetes-validations:
        - message: all oidcClients in the oidcProviders must match their componentName
            and componentNamespace to either a previously configured oidcClient or
            they must exist in the status.oidcClients
          rule: '!has(self.spec.oidcProviders) || self.spec.oidcProviders.all(p, !has(p.oidcClients)
            || p.oidcClients.all(specC, self.status.oidcClients.exists(statusC, statusC.componentNamespace
            == specC.componentNamespace && statusC.componentName == specC.componentName)
            || (has(oldSelf.spec.oidcProviders) && oldSelf.spec.oidcProviders.exists(oldP,
            oldP.name == p.name && has(oldP.oidcClients) && oldP.oidcClients.exists(oldC,
            oldC.componentNamespace == specC.componentNamespace && oldC.componentName
            == specC.componentName)))))'
    served: true
    storage: true
    subresources:
      status: {}
