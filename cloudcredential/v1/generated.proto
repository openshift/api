
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.openshift.api.cloudcredential.v1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "v1";

// AWSProviderSpec contains the required information to create a user policy in AWS.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message AWSProviderSpec {
  // StatementEntries contains a list of policy statements that should be associated with this credentials access key.
  repeated StatementEntry statementEntries = 1 [(gogoproto.customname) = "StatementEntries", (gogoproto.nullable) = false];
}

// AWSProviderStatus containes the status of the credentials request in AWS.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message AWSProviderStatus {
  // User is the name of the User created in AWS for these credentials.
  optional string user = 1 [(gogoproto.customname) = "User", (gogoproto.nullable) = false];

  // Policy is the name of the policy attached to the user in AWS.
  optional string policy = 2 [(gogoproto.customname) = "Policy", (gogoproto.nullable) = false];
}

// AzureProviderSpec contains the required information to create RBAC role
// bindings for Azure.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message AzureProviderSpec {
  // RoleBindings contains a list of roles that should be associated with the minted credential.
  repeated RoleBinding roleBindings = 1 [(gogoproto.customname) = "RoleBindings", (gogoproto.nullable) = false];
}

// AzureProviderStatus contains the status of the credentials request in Azure.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message AzureProviderStatus {
  // ServicePrincipalName is the name of the service principal created in Azure for these credentials.
  optional string name = 1 [(gogoproto.customname) = "ServicePrincipalName", (gogoproto.nullable) = false];

  // AppID is the application id of the service principal created in Azure for these credentials.
  optional string appID = 2 [(gogoproto.customname) = "AppID", (gogoproto.nullable) = false];

  // SecretLastResourceVersion is the resource version of the secret resource
  // that was last synced. Used to determine if the object has changed and
  // requires a sync.
  optional string secretLastResourceVersion = 3 [(gogoproto.customname) = "SecretLastResourceVersion", (gogoproto.nullable) = false];
}

// CredentialsRequest is the Schema for the credentialsrequests API
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
message CredentialsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional CredentialsRequestSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional CredentialsRequestStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// CredentialsRequestCondition contains details for any of the conditions on a CredentialsRequest object
message CredentialsRequestCondition {
  // Type is the specific type of the condition
  optional string type = 1 [(gogoproto.casttype) = "CredentialsRequestConditionType", (gogoproto.customname) = "Type", (gogoproto.nullable) = false];

  // Status is the status of the condition
  optional string status = 2 [(gogoproto.casttype) = "k8s.io/api/core/v1.ConditionStatus", (gogoproto.customname) = "Status", (gogoproto.nullable) = false];

  // LastProbeTime is the last time we probed the condition
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3 [(gogoproto.customname) = "LastProbeTime", (gogoproto.nullable) = false];

  // LastTransitionTime is the last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4 [(gogoproto.customname) = "LastTransitionTime", (gogoproto.nullable) = false];

  // Reason is a unique, one-word, CamelCase reason for the condition's last transition
  optional string reason = 5 [(gogoproto.customname) = "Reason", (gogoproto.nullable) = false];

  // Message is a human-readable message indicating details about the last transition
  optional string message = 6 [(gogoproto.customname) = "Message", (gogoproto.nullable) = false];
}

// CredentialsRequestList contains a list of CredentialsRequest
message CredentialsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated CredentialsRequest items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// CredentialsRequestSpec defines the desired state of CredentialsRequest
message CredentialsRequestSpec {
  // SecretRef points to the secret where the credentials should be stored once generated.
  optional k8s.io.api.core.v1.ObjectReference secretRef = 1 [(gogoproto.customname) = "SecretRef", (gogoproto.nullable) = false];

  // ProviderSpec contains the cloud provider specific credentials specification.
  optional k8s.io.apimachinery.pkg.runtime.RawExtension providerSpec = 2 [(gogoproto.customname) = "ProviderSpec"];
}

// CredentialsRequestStatus defines the observed state of CredentialsRequest
message CredentialsRequestStatus {
  // Provisioned is true once the credentials have been initially provisioned.
  optional bool provisioned = 1 [(gogoproto.customname) = "Provisioned", (gogoproto.nullable) = false];

  // LastSyncTimestamp is the time that the credentials were last synced.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastSyncTimestamp = 2 [(gogoproto.customname) = "LastSyncTimestamp"];

  // LastSyncGeneration is the generation of the credentials request resource
  // that was last synced. Used to determine if the object has changed and
  // requires a sync.
  optional int64 lastSyncGeneration = 3 [(gogoproto.customname) = "LastSyncGeneration", (gogoproto.nullable) = false];

  // ProviderStatus contains cloud provider specific status.
  optional k8s.io.apimachinery.pkg.runtime.RawExtension providerStatus = 4 [(gogoproto.customname) = "ProviderStatus"];

  // Conditions includes detailed status for the CredentialsRequest
  // +optional
  repeated CredentialsRequestCondition conditions = 5 [(gogoproto.customname) = "Conditions", (gogoproto.nullable) = false];
}

// GCPProviderSpec contains the required information to create a service account with policy bindings in GCP.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GCPProviderSpec {
  // PredefinedRoles is the list of GCP pre-defined roles
  // that the CredentialsRequest requires.
  repeated string predefinedRoles = 1 [(gogoproto.customname) = "PredefinedRoles"];

  // SkipServiceCheck can be set to true to skip the check whether the requested roles
  // have the necessary services enabled
  // +optional
  optional bool skipServiceCheck = 2 [(gogoproto.customname) = "SkipServiceCheck", (gogoproto.nullable) = false];
}

// GCPProviderStatus contains the status of the GCP credentials request.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message GCPProviderStatus {
  // ServiceAccountID is the ID of the service account created in GCP for the requested credentials.
  optional string serviceAccountID = 1 [(gogoproto.customname) = "ServiceAccountID", (gogoproto.nullable) = false];
}

// OpenStackProviderSpec the specification of the credentials request in OpenStack.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message OpenStackProviderSpec {
}

// OpenStackProviderStatus contains the status of the credentials request in OpenStack.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message OpenStackProviderStatus {
}

// OvirtProviderSpec the specification of the credentials request in Ovirt.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message OvirtProviderSpec {
}

// OvirtProviderStatus contains the status of the credentials request in Ovirt.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message OvirtProviderStatus {
}

// RoleBinding models part of the Azure RBAC Role Binding
message RoleBinding {
  // Role defines a set of permissions that should be associated with the minted credential.
  optional string role = 1 [(gogoproto.customname) = "Role", (gogoproto.nullable) = false];
}

// StatementEntry models an AWS policy statement entry.
message StatementEntry {
  // Effect indicates if this policy statement is to Allow or Deny.
  optional string effect = 1 [(gogoproto.customname) = "Effect", (gogoproto.nullable) = false];

  // Action describes the particular AWS service actions that should be allowed or denied. (i.e. ec2:StartInstances, iam:ChangePassword)
  repeated string action = 2 [(gogoproto.customname) = "Action"];

  // Resource specifies the object(s) this statement should apply to. (or "*" for all)
  optional string resource = 3 [(gogoproto.customname) = "Resource", (gogoproto.nullable) = false];

  // PolicyCondition specifies under which condition StatementEntry will apply
  map<string, map<string, k8s.io.apimachinery.pkg.runtime.RawExtension>> policyCondition = 4 [(gogoproto.casttype) = "IAMPolicyCondition", (gogoproto.castvalue) = "IAMPolicyConditionKeyValue", (gogoproto.customname) = "PolicyCondition", (gogoproto.nullable) = false];
}

// VSpherePermission captures the details of the privileges being requested for the list of entities.
message VSpherePermission {
  // Privileges is the list of access being requested.
  repeated string privileges = 1 [(gogoproto.customname) = "Privileges"];
}

// VSphereProviderSpec contains the required information to create RBAC role
// bindings for VSphere.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VSphereProviderSpec {
  // Permissions contains a list of groups of privileges that are being requested.
  repeated VSpherePermission permissions = 1 [(gogoproto.customname) = "Permissions", (gogoproto.nullable) = false];
}

// VSphereProviderStatus contains the status of the credentials request in VSphere.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VSphereProviderStatus {
  // SecretLastResourceVersion is the resource version of the secret resource
  // that was last synced. Used to determine if the object has changed and
  // requires a sync.
  optional string secretLastResourceVersion = 1 [(gogoproto.customname) = "SecretLastResourceVersion", (gogoproto.nullable) = false];
}

