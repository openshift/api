version: "2"
linters:
  default: none
  enable:
    - kubeapilinter
  settings:
    custom:
      kubeapilinter:
        path: tools/_output/bin/kube-api-linter.so
        description: kubeapilinter is the Kube-API-Linter and lints Kube like APIs based on API conventions and best practices.
        settings:
          linters:
            enable:
              - forbiddenmarkers
              - maxlength
              - namingconventions
              - nobools
              - nomaps
              - statussubresource
          lintersConfig:
            conditions:
              isFirstField: Warn
              usePatchStrategy: Ignore
              useProtobuf: Ignore
            forbiddenmarkers:
              markers:
              - identifier: "openshift:enable:FeatureSets"
              - identifier: "openshift:validation:FeatureSetAwareEnum"
              - identifier: "openshift:validation:FeatureSetAwareXValidation"
              - identifier: "kubebuilder:validation:UniqueItems"
              - identifier: "kubebuilder:validation:Pattern" # Use CEL expressions instead
            optionalfields:
              pointers:
                preference: WhenRequired
                policy: SuggestFix
              omitEmpty:
                # This will force omitempty on optional fields.
                # This is in line with upstream guidance where optional fields should be omitted
                # from the serialized output unless they are non-zero.
                policy: SuggestFix
              omitzero:
                # This will force omitzero on optional struct fields.
                # This means they can be omitted correctly and prevents the need for pointers to structs.
                policy: SuggestFix
            requiredfields:
              pointers:
                # This will force pointers when the field is required, but only when the zero
                # value is a valid user choice, and has a semantic difference to being omitted (e.g. replicas allows 0).
                policy: SuggestFix
              omitempty:
                # This will force omitempty on required fields.
                # We do this so that the behaviour of not setting a value for the field is the same between
                # both structured and unstructured clients.
                policy: SuggestFix
              omitzero:
                # This will force omitzero on required struct fields.
                # This means they can be omitted correctly and prevents the need for pointers to structs.
                policy: SuggestFix
            namingconventions:
              conventions:
              - name: norefs
                violationMatcher: "(?i)ref(erence)?s?$"
                operation: Drop
                message: "reference fields should not need to be named ref(s)/reference(s)"
              - name: nokind
                violationMatcher: "^Kind$"
                operation: Replacement
                replacement: "Resource"
                message: "API Kinds can be ambiguous and should be replaced with Resource"
            uniquemarkers:
              customMarkers:
              - identifier: "openshift:validation:FeatureGateAwareEnum"
                attributes:
                - featureGate
                - requiredFeatureGate
              - identifier: "openshift:validation:FeatureGateMaxItems"
                attributes:
                - featureGate
                - requiredFeatureGate
              - identifier: "openshift:validation:FeatureGateAwareXValidation"
                attributes:
                - featureGate
                - requiredFeatureGate
                - rule
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    paths:
      - third_party$
      - builtin$
      - examples$
    rules:
      - linters:
        - kubeapilinter
        # This regex must always be updated in tandem with the regex in .golangci.go-validated.yaml that prevents `optionalfields` from being applied to the files in the path.
        path: machine/v1beta1/(types_awsprovider.go|types_azureprovider.go|types_gcpprovider.go|types_vsphereprovider.go)|machine/v1alpha1/types_openstack.go
        text: "optionalfields"
issues:
  # We have a lot of existing issues.
  # Want to make sure that those adding new fields have an
  # opportunity to fix them when running the linter locally.
  max-issues-per-linter: 1000
formatters:
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
