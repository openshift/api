apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.openshift.io: https://github.com/openshift/api/pull/XXXX
    exclude.release.openshift.io/internal-openshift-hosted: "true"
    include.release.openshift.io/self-managed-high-availability: "true"
    release.openshift.io/feature-set: CustomNoUpgrade
  creationTimestamp: null
  name: openshiftcontrolplanes.cluster.openshift.io
spec:
  group: cluster.openshift.io
  names:
    kind: OpenShiftControlPlane
    listKind: OpenShiftControlPlaneList
    plural: openshiftcontrolplanes
    singular: openshiftcontrolplane
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: 'OpenShiftControlPlane is repsonsible for bootstrapping an OpenShift cluster control plane. Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.'
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: spec is the desired state of the OpenShiftControlPlane.
              type: object
              required:
                - installStateSecretRef
                - machineTemplate
              properties:
                installStateSecretRef:
                  description: installStateSecretRef is a reference to a secret containing the install state. The install state secret must contain either the install config or the install state, or both. The install state secret must be in the same namespace as the OpenShiftControlPlane. The install config must be under the key `install-config.yaml` and the install state must be under the key `.openshift_install_state.json`. These files will be passed to the installer to generate the ignition configs for the bootstrap node, control plane nodes and worker nodes.
                  type: object
                  required:
                    - name
                  properties:
                    name:
                      description: name is the name of the secret. It has a maximum length of 253 characters and must be a valid DNS subdomain name. It must consist only of lowercase alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character.
                      type: string
                      maxLength: 253
                      pattern: '[a-z0-9]([-.a-z0-9]{,251}[a-z0-9])?'
                machineTemplate:
                  description: machineTemplate defines the machine template used to create the initial bootstrap and control plane machines. Continued management of the control plane machines will be handled by the control plane machine set. The machine template is therefore immutable and only applicable during the bootstrap process.
                  type: object
                  required:
                    - infrastructureRef
                  properties:
                    infrastructureRef:
                      description: infrastructureRef is a required reference to a custom resource offered by an infrastructure provider. The infrastructure reference should define a template for the infrastructure provider to create the bootstrap and control plane nodes.
                      type: object
                      required:
                        - apiVersion
                        - kind
                        - name
                        - namespace
                      properties:
                        apiVersion:
                          description: apiVersion of the referent.
                          type: string
                        kind:
                          description: 'kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                    metadata:
                      description: 'metadata is the standard object''s metadata. This allows for machine labels and annotations to be applied to the control plane machines. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                      type: object
                      properties:
                        annotations:
                          description: 'annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                          type: object
                          additionalProperties:
                            type: string
                        labels:
                          description: 'labels is a map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                          type: object
                          additionalProperties:
                            type: string
                    nodeDeletionTimeout:
                      description: NodeDeletionTimeout defines how long the machine controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. If no value is provided, the default value for this property of the Machine resource will be used.
                      type: string
                    nodeDrainTimeout:
                      description: 'NodeDrainTimeout is the total amount of time that the controller will spend on draining a controlplane node The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`'
                      type: string
                    nodeVolumeDetachTimeout:
                      description: NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
                      type: string
                  x-kubernetes-validations:
                    - rule: self == oldSelf
                      message: machineTemplate is immutable
                manifestsSelector:
                  description: manifestsSelector is a selector to identify secrets containing manifests to be included in the ignition generation phase. The selector must match the labels on the secrets to be injected. Each key in the secret must be the path to a file to be injected into the ignition. This path should start with either `manifests/` or `openshift/`. When omitted, the default manifests generated by the installer will be used.
                  type: object
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                      type: array
                      items:
                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                        type: object
                        required:
                          - key
                          - operator
                        properties:
                          key:
                            description: key is the label key that the selector applies to.
                            type: string
                          operator:
                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                            type: array
                            items:
                              type: string
                    matchLabels:
                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                      type: object
                      additionalProperties:
                        type: string
                  x-kubernetes-map-type: atomic
            status:
              description: status is the observed state of the OpenShiftControlPlane.
              type: object
              properties:
                conditions:
                  description: conditions represents the observations of the OpenShiftControlPlane's current state.
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                initialized:
                  description: initialized denotes whether or not the control plane has been initialized. This value will be set true once the first control plane node has joined the bootstrap control plane.
                  type: boolean
                ready:
                  description: ready denotes whether or not the control plane has has reached a ready state. This value will be set true once the bootstrap node has completed the cluster bootstrap and the bootstrap node has been shut down.
                  type: boolean
      served: true
      storage: true
      subresources:
        scale:
          labelSelectorPath: .status.labelSelector
          specReplicasPath: .spec.replicas
          statusReplicasPath: .status.replicas
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
