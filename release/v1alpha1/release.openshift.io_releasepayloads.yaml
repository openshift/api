apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
    api-approved.openshift.io: https://github.com/openshift/api/pull/987
  creationTimestamp: null
  name: releasepayloads.release.openshift.io
spec:
  group: release.openshift.io
  names:
    kind: ReleasePayload
    listKind: ReleasePayloadList
    plural: releasepayloads
    singular: releasepayload
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: "ReleasePayload encapsulates the information for the creation of a ReleasePayload and aggregates the results of its respective verification tests. \n The release-controller is configured to monitor imagestreams, in a specific namespace, that are annotated with a ReleaseConfig.  The ReleaseConfig is a definition of how releases are calculated.  When a ReleasePayload is generated, it will be generated in the same namespace as the imagstream that produced it. If/when an update occurs, to one of these imagestreams, the release-controller will:   1) Create a point-in-time mirror of the updated imagestream   2) Create a new Release from the mirror        - Any errors before this point will cause the release to marked `Failed`   3) Launches a set of release analysis jobs   4) Launches an aggregation job   5) Launches a set of release verification jobs        - These can either be `Blocking Jobs` which will prevent release acceptance or `Informing Jobs` which will          not prevent release acceptance.   6) Monitors for job completions        - If all `Blocking Jobs` complete successfully, then the release is `Accepted`.  If any `Blocking Jobs` fail,          the release will be marked `Rejected`   7) Publishes all results to the respective webpage \n Example: ART:   1) Publishes an update to the `ocp/4.9-art-latest` imagestream \n Release-controller:   1) Creates a mirror named: `ocp/4.9-art-latest-2021-09-27-105859`   2) Creates an OpenShift Release: `ocp/release:4.9.0-0.nightly-2021-09-27-105859`   3) Launches: 4.9.0-0.nightly-2021-09-27-105859-aggregated-<name>-analysis-<count>   4) Launches: 4.9.0-0.nightly-2021-09-27-105859-aggregated-<name>-aggregator   5) Launches: 4.9.0-0.nightly-2021-09-27-105859-<name> \n Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support."
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Spec the inputs used to create the ReleasePayload
              type: object
              properties:
                payloadCoordinates:
                  type: object
                  properties:
                    imagestreamName:
                      type: string
                    imagestreamTagName:
                      type: string
                    namespace:
                      type: string
            status:
              description: Status is the current status of the ReleasePayload
              type: object
              properties:
                analysisJobResults:
                  description: AnalysisJobResults stores the results of all analysis jobs
                  type: array
                  items:
                    description: JobStatus encapsulates the name of the job, all the results of the jobs, and an aggregated result of all the jobs
                    type: object
                    properties:
                      maxRetries:
                        description: MaxRetries maximum times to retry a job
                        type: integer
                      name:
                        description: jobName is the name of the job
                        type: string
                      results:
                        description: JobRunResults contains the links for individual jobs
                        type: array
                        items:
                          description: JobRunResult the results of a prowjob run The release-controller creates ProwJobs (prowv1.ProwJob) during the sync_ready control loop and relies on an informer to process jobs, that it created, as they are completed. The JobRunResults will be created, by the release-controller during the sync_ready loop and updated whenever any changes, to the respective job is received by the informer.
                          type: object
                          properties:
                            cluster:
                              description: Cluster is which Kubernetes cluster is used to run the job
                              type: string
                            completionTime:
                              description: CompletionTime timestamp for when the prow pipeline controller observes the final state of the ProwJob For instance, if a client Aborts a ProwJob, the Pipeline controller will receive notification of the change and update the PtowJob's Status accordingly.
                              type: string
                              format: date-time
                            humanProwResultsURL:
                              description: HumanProwResultsURL the html link to the prow results
                              type: string
                            name:
                              description: Name unique name for the job run
                              type: string
                            namespace:
                              description: Namespace location where the job ran
                              type: string
                            runId:
                              description: RunID the unique identifier of the job
                              type: integer
                            startTime:
                              description: StartTime timestamp for when the prowjob was created
                              type: string
                              format: date-time
                            state:
                              description: State the current state of the job run
                              type: string
                      state:
                        description: AggregateState is the overall success/failure of all the executed jobs
                        type: string
                blockingJobResults:
                  description: BlockingJobResults stores the results of all blocking jobs
                  type: array
                  items:
                    description: JobStatus encapsulates the name of the job, all the results of the jobs, and an aggregated result of all the jobs
                    type: object
                    properties:
                      maxRetries:
                        description: MaxRetries maximum times to retry a job
                        type: integer
                      name:
                        description: jobName is the name of the job
                        type: string
                      results:
                        description: JobRunResults contains the links for individual jobs
                        type: array
                        items:
                          description: JobRunResult the results of a prowjob run The release-controller creates ProwJobs (prowv1.ProwJob) during the sync_ready control loop and relies on an informer to process jobs, that it created, as they are completed. The JobRunResults will be created, by the release-controller during the sync_ready loop and updated whenever any changes, to the respective job is received by the informer.
                          type: object
                          properties:
                            cluster:
                              description: Cluster is which Kubernetes cluster is used to run the job
                              type: string
                            completionTime:
                              description: CompletionTime timestamp for when the prow pipeline controller observes the final state of the ProwJob For instance, if a client Aborts a ProwJob, the Pipeline controller will receive notification of the change and update the PtowJob's Status accordingly.
                              type: string
                              format: date-time
                            humanProwResultsURL:
                              description: HumanProwResultsURL the html link to the prow results
                              type: string
                            name:
                              description: Name unique name for the job run
                              type: string
                            namespace:
                              description: Namespace location where the job ran
                              type: string
                            runId:
                              description: RunID the unique identifier of the job
                              type: integer
                            startTime:
                              description: StartTime timestamp for when the prowjob was created
                              type: string
                              format: date-time
                            state:
                              description: State the current state of the job run
                              type: string
                      state:
                        description: AggregateState is the overall success/failure of all the executed jobs
                        type: string
                conditions:
                  description: "Conditions communicates the state of the ReleasePayload. \n Supported conditions include PayloadCreated, PayloadCreationFailed, Accepted, and Rejected. \n If PayloadCreated is false the ReleasePayload is waiting for a release image to be created and pushed to the TargetImageStream.  If PayloadCreated is true a release image has been created and pushed to the TargetImageStream. Verification jobs should begin and will update the status as they complete. \n If PayloadCreationFailed is true a ReleasePayload image cannot be created for the given set of image mirrors This condition is terminal \n If Accepted is true the ReleasePayload has passed its verification criteria and can safely be promoted to an external location This condition is terminal \n if Rejected is true the ReleasePayload has failed one or more of its verification criteria The release-controller will take no more action in this phase."
                  type: array
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                    type: object
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        type: string
                        format: date-time
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        type: string
                        maxLength: 32768
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        type: integer
                        format: int64
                        minimum: 0
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        type: string
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        type: string
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                informingJobResults:
                  description: InformingJobResults stores the results of all informing jobs
                  type: array
                  items:
                    description: JobStatus encapsulates the name of the job, all the results of the jobs, and an aggregated result of all the jobs
                    type: object
                    properties:
                      maxRetries:
                        description: MaxRetries maximum times to retry a job
                        type: integer
                      name:
                        description: jobName is the name of the job
                        type: string
                      results:
                        description: JobRunResults contains the links for individual jobs
                        type: array
                        items:
                          description: JobRunResult the results of a prowjob run The release-controller creates ProwJobs (prowv1.ProwJob) during the sync_ready control loop and relies on an informer to process jobs, that it created, as they are completed. The JobRunResults will be created, by the release-controller during the sync_ready loop and updated whenever any changes, to the respective job is received by the informer.
                          type: object
                          properties:
                            cluster:
                              description: Cluster is which Kubernetes cluster is used to run the job
                              type: string
                            completionTime:
                              description: CompletionTime timestamp for when the prow pipeline controller observes the final state of the ProwJob For instance, if a client Aborts a ProwJob, the Pipeline controller will receive notification of the change and update the PtowJob's Status accordingly.
                              type: string
                              format: date-time
                            humanProwResultsURL:
                              description: HumanProwResultsURL the html link to the prow results
                              type: string
                            name:
                              description: Name unique name for the job run
                              type: string
                            namespace:
                              description: Namespace location where the job ran
                              type: string
                            runId:
                              description: RunID the unique identifier of the job
                              type: integer
                            startTime:
                              description: StartTime timestamp for when the prowjob was created
                              type: string
                              format: date-time
                            state:
                              description: State the current state of the job run
                              type: string
                      state:
                        description: AggregateState is the overall success/failure of all the executed jobs
                        type: string
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
