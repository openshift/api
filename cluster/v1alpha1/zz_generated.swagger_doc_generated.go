package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_OpenShiftBootstrapConfig = map[string]string{
	"":         "OpenShiftBootstrapConfig is repsonsible for providing ignition configuration to bootstrp nodes on an OpenShift cluster managed by Cluster API. Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"status":   "status is the observed state of the OpenShiftBootstrapProvider.",
}

func (OpenShiftBootstrapConfig) SwaggerDoc() map[string]string {
	return map_OpenShiftBootstrapConfig
}

var map_OpenShiftBootstrapConfigList = map[string]string{
	"":         "OpenShiftBootstrapConfigList contains a list of OpenShiftBootstrapConfig Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "items contains a list of OpenShiftBootstrapConfigs.",
}

func (OpenShiftBootstrapConfigList) SwaggerDoc() map[string]string {
	return map_OpenShiftBootstrapConfigList
}

var map_OpenShiftBootstrapConfigStatus = map[string]string{
	"":               "OpenShiftBootstrapConfigStatus contains status related to the OpenShiftBootstrapConfig state.",
	"conditions":     "conditions represents the observations of the OpenShiftBootstrapConfig's current state.",
	"ready":          "ready denotes whether or not the bootstrap data has been created. ",
	"dataSecretName": "dataSecretName is the name of the user data secret that should be used to bootstrap the owning Machine's Node when it first boots. ",
}

func (OpenShiftBootstrapConfigStatus) SwaggerDoc() map[string]string {
	return map_OpenShiftBootstrapConfigStatus
}

var map_InfrastructureReference = map[string]string{
	"":           "InfrastructureReference is a reference to a custom resource offered by an infrastructure provider. This is a subset of corev1.ObjectReference. The namespace must be set to the same as the OpenShiftControlPlane, but is required by Cluster API. Upstream discussion: https://github.com/kubernetes-sigs/cluster-api/issues/6539",
	"kind":       "kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
	"namespace":  "namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
	"name":       "name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
	"apiVersion": "apiVersion of the referent.",
}

func (InfrastructureReference) SwaggerDoc() map[string]string {
	return map_InfrastructureReference
}

var map_ObjectMeta = map[string]string{
	"":            "ObjectMeta is a subset of metav1.ObjectMeta. We use this to customise the labels and annotations applied to control plane machines.",
	"labels":      "labels is a map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
	"annotations": "annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
}

func (ObjectMeta) SwaggerDoc() map[string]string {
	return map_ObjectMeta
}

var map_OpenShiftControlPlane = map[string]string{
	"":         "OpenShiftControlPlane is repsonsible for bootstrapping an OpenShift cluster control plane. Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"spec":     "spec is the desired state of the OpenShiftControlPlane.",
	"status":   "status is the observed state of the OpenShiftControlPlane.",
}

func (OpenShiftControlPlane) SwaggerDoc() map[string]string {
	return map_OpenShiftControlPlane
}

var map_OpenShiftControlPlaneList = map[string]string{
	"":         "OpenShiftControlPlaneList contains a list of OpenShiftControlPlane Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is the standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "items contains a list of OpenShiftControlPlanes.",
}

func (OpenShiftControlPlaneList) SwaggerDoc() map[string]string {
	return map_OpenShiftControlPlaneList
}

var map_OpenShiftControlPlaneMachineTemplate = map[string]string{
	"":                        "OpenShiftControlPlaneMachineTemplate is the spec of the OpenShift control plane machines.",
	"metadata":                "metadata is the standard object's metadata. This allows for machine labels and annotations to be applied to the control plane machines. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"infrastructureRef":       "infrastructureRef is a required reference to a custom resource offered by an infrastructure provider. The infrastructure reference should define a template for the infrastructure provider to create the bootstrap and control plane nodes.",
	"nodeDrainTimeout":        "NodeDrainTimeout is the total amount of time that the controller will spend on draining a controlplane node The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`",
	"nodeVolumeDetachTimeout": "NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.",
	"nodeDeletionTimeout":     "NodeDeletionTimeout defines how long the machine controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. If no value is provided, the default value for this property of the Machine resource will be used.",
}

func (OpenShiftControlPlaneMachineTemplate) SwaggerDoc() map[string]string {
	return map_OpenShiftControlPlaneMachineTemplate
}

var map_OpenShiftControlPlaneSecretRef = map[string]string{
	"":     "OpenShiftControlPlaneSecretRef is the reference to a secret in the same namespace as the OpenShiftControlPlane.",
	"name": "name is the name of the secret. It has a maximum length of 253 characters and must be a valid DNS subdomain name. It must consist only of lowercase alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character.",
}

func (OpenShiftControlPlaneSecretRef) SwaggerDoc() map[string]string {
	return map_OpenShiftControlPlaneSecretRef
}

var map_OpenShiftControlPlaneSpec = map[string]string{
	"":                      "OpenShiftControlPlaneSpec is the spec of the OpenShift control plane resource.",
	"machineTemplate":       "machineTemplate defines the machine template used to create the initial bootstrap and control plane machines. Continued management of the control plane machines will be handled by the control plane machine set. The machine template is therefore immutable and only applicable during the bootstrap process. ",
	"installStateSecretRef": "installStateSecretRef is a reference to a secret containing the install state. The install state secret must contain either the install config or the install state, or both. The install state secret must be in the same namespace as the OpenShiftControlPlane. The install config must be under the key `install-config.yaml` and the install state must be under the key `.openshift_install_state.json`. These files will be passed to the installer to generate the ignition configs for the bootstrap node, control plane nodes and worker nodes.",
	"manifestsSelector":     "manifestsSelector is a selector to identify secrets containing manifests to be included in the ignition generation phase. The selector must match the labels on the secrets to be injected. Each key in the secret must be the path to a file to be injected into the ignition. This path should start with either `manifests/` or `openshift/`. When omitted, the default manifests generated by the installer will be used.",
}

func (OpenShiftControlPlaneSpec) SwaggerDoc() map[string]string {
	return map_OpenShiftControlPlaneSpec
}

var map_OpenShiftControlPlaneStatus = map[string]string{
	"":            "OpenShiftControlPlaneStatus contains fields to describe the state of the OpenShiftControlPlane state.",
	"conditions":  "conditions represents the observations of the OpenShiftControlPlane's current state.",
	"initialized": "initialized denotes whether or not the control plane has been initialized. This value will be set true once the first control plane node has joined the bootstrap control plane. ",
	"ready":       "ready denotes whether or not the control plane has has reached a ready state. This value will be set true once the bootstrap node has completed the cluster bootstrap and the bootstrap node has been shut down. ",
}

func (OpenShiftControlPlaneStatus) SwaggerDoc() map[string]string {
	return map_OpenShiftControlPlaneStatus
}

// AUTO-GENERATED FUNCTIONS END HERE
