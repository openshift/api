package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_ClusterOperatorProgressInsight = map[string]string{
	"":         "ClusterOperatorProgressInsight reports the state of a Cluster Operator (an individual control plane component) during an update\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support. ClusterOperatorProgressInsight reports the state of a Cluster Operator (an individual control plane component) during an update",
	"metadata": "metadata is standard Kubernetes object metadata",
	"spec":     "spec is empty for now, ClusterOperatorProgressInsight is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
	"status":   "status exposes the health and status of the ongoing cluster operator update",
}

func (ClusterOperatorProgressInsight) SwaggerDoc() map[string]string {
	return map_ClusterOperatorProgressInsight
}

var map_ClusterOperatorProgressInsightList = map[string]string{
	"":         "ClusterOperatorProgressInsightList is a list of ClusterOperatorProgressInsightList resources\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is standard Kubernetes object metadata",
	"items":    "items is a list of ClusterOperatorProgressInsight resources",
}

func (ClusterOperatorProgressInsightList) SwaggerDoc() map[string]string {
	return map_ClusterOperatorProgressInsightList
}

var map_ClusterOperatorProgressInsightSpec = map[string]string{
	"": "ClusterOperatorProgressInsightSpec is empty for now, ClusterOperatorProgressInsightSpec is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
}

func (ClusterOperatorProgressInsightSpec) SwaggerDoc() map[string]string {
	return map_ClusterOperatorProgressInsightSpec
}

var map_ClusterOperatorProgressInsightStatus = map[string]string{
	"":           "ClusterOperatorProgressInsight reports the state of a ClusterOperator resource (which represents a control plane component update in standalone clusters), during the update",
	"conditions": "conditions provide details about the operator. It contains at most 10 items. Known conditions are: - Updating: whether the operator is updating; When Updating=False, the reason field can be Pending or Updated - Healthy: whether the operator is considered healthy; When Healthy=False, the reason field can be Unavailable or Degraded, and Unavailable is \"stronger\" than Degraded",
	"name":       "name is the name of the operator",
	"resource":   "resource is the ClusterOperator resource that represents the operator",
}

func (ClusterOperatorProgressInsightStatus) SwaggerDoc() map[string]string {
	return map_ClusterOperatorProgressInsightStatus
}

var map_ClusterVersionProgressInsight = map[string]string{
	"":         "ClusterVersionProgressInsight provides summary information about an ongoing cluster control plane update in Standalone clusters\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support. ClusterVersionProgressInsight reports the state of a ClusterVersion resource (which represents a control plane update in standalone clusters), during a cluster update.",
	"metadata": "metadata is standard Kubernetes object metadata",
	"spec":     "spec is empty for now, ClusterVersionProgressInsight is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
	"status":   "status exposes the health and status of the ongoing cluster update",
}

func (ClusterVersionProgressInsight) SwaggerDoc() map[string]string {
	return map_ClusterVersionProgressInsight
}

var map_ClusterVersionProgressInsightList = map[string]string{
	"":         "ClusterVersionProgressInsightList is a list of ClusterVersionProgressInsightList resources\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is standard Kubernetes object metadata",
	"items":    "items is a list of ClusterVersionProgressInsight resources",
}

func (ClusterVersionProgressInsightList) SwaggerDoc() map[string]string {
	return map_ClusterVersionProgressInsightList
}

var map_ClusterVersionProgressInsightSpec = map[string]string{
	"": "ClusterVersionProgressInsightSpec is empty for now, ClusterVersionProgressInsightSpec is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
}

func (ClusterVersionProgressInsightSpec) SwaggerDoc() map[string]string {
	return map_ClusterVersionProgressInsightSpec
}

var map_ClusterVersionProgressInsightStatus = map[string]string{
	"":                     "ClusterVersionProgressInsightStatus reports the state of a ClusterVersion resource (which represents a control plane update in standalone clusters), during the update.",
	"conditions":           "conditions provides detailed observed conditions about ClusterVersion. It contains at most 10 items. Known conditions are: - Updating: whether the control plane (represented by this ClusterVersion) is updating",
	"resource":             "resource is the ClusterVersion resource that represents the control plane",
	"assessment":           "assessment is the assessment of the control plane update process. Valid values are: Unknown, Progressing, Completed, Degraded",
	"versions":             "versions contains the original and target versions involved in the update",
	"completion":           "completion is a percentage of the update completion (0-100)",
	"startedAt":            "startedAt is the time when the update started",
	"completedAt":          "completedAt is the time when the update completed",
	"estimatedCompletedAt": "estimatedCompletedAt is the estimated time when the update will complete",
}

func (ClusterVersionProgressInsightStatus) SwaggerDoc() map[string]string {
	return map_ClusterVersionProgressInsightStatus
}

var map_ControlPlaneUpdateVersions = map[string]string{
	"":         "ControlPlaneUpdateVersions contains the original and target versions of the upgrade",
	"previous": "previous is the version of the control plane before the update. When the cluster is being installed for the first time, the version will have a placeholder value '<none>' and carry 'Installation' metadata",
	"target":   "target is the version of the control plane after the update. It may never be '<none>' or have `Installation` metadata",
}

func (ControlPlaneUpdateVersions) SwaggerDoc() map[string]string {
	return map_ControlPlaneUpdateVersions
}

var map_ResourceRef = map[string]string{
	"":          "ResourceRef is a reference to a kubernetes resource, typically involved in an insight",
	"group":     "group of the object being referenced, if any",
	"resource":  "resource of object being referenced",
	"name":      "name of the object being referenced",
	"namespace": "namespace of the object being referenced, if any",
}

func (ResourceRef) SwaggerDoc() map[string]string {
	return map_ResourceRef
}

var map_Version = map[string]string{
	"":         "Version describes a version involved in an update, typically on one side of an update edge",
	"version":  "version is a semantic version string, or a placeholder '<none>' for the special case where this is a \"previous\" version in a new installation, in which case the metadata must contain an item with key 'Installation'",
	"metadata": "metadata is a list of metadata associated with the version. It is a list of key-value pairs. The value is optional and when not provided, the metadata item has boolean semantics (presence indicates true). For example, 'Partial' metadata on a previous version indicates that the previous update was never fully completed. Can contain at most 5 items.",
}

func (Version) SwaggerDoc() map[string]string {
	return map_Version
}

var map_VersionMetadata = map[string]string{
	"":      "VersionMetadata is a key:value item assigned to version involved in the update. Value can be empty, then the metadata have boolean semantics (true when present, false when absent)",
	"key":   "key is the name of this metadata value. Valid values are: Installation, Partial, Architecture",
	"value": "value is the value for the metadata, at most 32 characters long. It is not expected to be provided for Installation and Partial metadata. For Architecture metadata, it is expected to be a string that indicates the architecture of the payload image of the version involved in the upgrade, when relevant.",
}

func (VersionMetadata) SwaggerDoc() map[string]string {
	return map_VersionMetadata
}

var map_HealthInsight = map[string]string{
	"":         "HealthInsight is a piece of actionable information produced by an insight producer about the health of the cluster in the context of an update\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support. HealthInsight is a piece of actionable information produced by an insight producer about the health of the cluster in the context of an update",
	"metadata": "metadata is standard Kubernetes object metadata",
	"spec":     "spec is empty for now, HealthInsight is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
	"status":   "status reports a piece of actionable information produced by an insight producer about the health of the cluster in the context of an update",
}

func (HealthInsight) SwaggerDoc() map[string]string {
	return map_HealthInsight
}

var map_HealthInsightList = map[string]string{
	"":         "HealthInsightList is a list of HealthInsightList resources\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is standard Kubernetes object metadata",
	"items":    "items is a list of HealthInsight resources",
}

func (HealthInsightList) SwaggerDoc() map[string]string {
	return map_HealthInsightList
}

var map_HealthInsightSpec = map[string]string{
	"": "HealthInsightSpec is empty for now, HealthInsightSpec is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
}

func (HealthInsightSpec) SwaggerDoc() map[string]string {
	return map_HealthInsightSpec
}

var map_HealthInsightStatus = map[string]string{
	"":            "HealthInsightStatus reports a piece of actionable information produced by an insight producer about the health of the cluster in the context of an update",
	"startedAt":   "startedAt is the time when the condition reported by the insight started",
	"scope":       "scope is list of objects involved in the insight",
	"impact":      "impact describes the impact the reported condition has on the cluster or update",
	"remediation": "remediation contains information about how to resolve or prevent the reported condition",
}

func (HealthInsightStatus) SwaggerDoc() map[string]string {
	return map_HealthInsightStatus
}

var map_InsightImpact = map[string]string{
	"":            "InsightImpact describes the impact the reported condition has on the cluster or update",
	"level":       "level is the severity of the impact. Valid values are Unknown, Info, Warning, Error, Critical.",
	"type":        "type is the type of the impact. Valid values are None, Unknown, API Availability, Cluster Capacity, Application Availability, Application Outage, Data Loss, Update Speed, Update Stalled.",
	"summary":     "summary is a short summary of the impact. It must not be empty and must be shorter than 256 characters.",
	"description": "description is a human-oriented, possibly longer-form description of the condition reported by the insight It must be shorter than 4096 characters.",
}

func (InsightImpact) SwaggerDoc() map[string]string {
	return map_InsightImpact
}

var map_InsightRemediation = map[string]string{
	"":                "InsightRemediation contains information about how to resolve or prevent the reported condition",
	"reference":       "reference is a URL where administrators can find information to resolve or prevent the reported condition",
	"estimatedFinish": "estimatedFinish is the estimated time when the informer expects the condition to be resolved, if applicable.",
}

func (InsightRemediation) SwaggerDoc() map[string]string {
	return map_InsightRemediation
}

var map_InsightScope = map[string]string{
	"":          "InsightScope is a list of resources involved in the insight",
	"type":      "type is either ControlPlane or WorkerPool",
	"resources": "resources is a list of resources involved in the insight, of any group/kind. Maximum 16 resources can be listed.",
}

func (InsightScope) SwaggerDoc() map[string]string {
	return map_InsightScope
}

var map_MachineConfigPoolProgressInsight = map[string]string{
	"":         "MachineConfigPoolProgressInsight provides summary information about an ongoing node pool update in Standalone clusters\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support. MachineConfigPoolProgressInsight reports the state of a MachineConfigPool resource (which represents a pool of nodes update in standalone clusters), during a cluster update.",
	"metadata": "metadata is standard Kubernetes object metadata",
	"spec":     "spec is empty for now, MachineConfigPoolProgressInsight is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
	"status":   "status exposes the health and status of the ongoing cluster update",
}

func (MachineConfigPoolProgressInsight) SwaggerDoc() map[string]string {
	return map_MachineConfigPoolProgressInsight
}

var map_MachineConfigPoolProgressInsightList = map[string]string{
	"":         "MachineConfigPoolProgressInsightList is a list of MachineConfigPoolProgressInsightList resources\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is standard Kubernetes object metadata",
	"items":    "items is a list of MachineConfigPoolProgressInsight resources",
}

func (MachineConfigPoolProgressInsightList) SwaggerDoc() map[string]string {
	return map_MachineConfigPoolProgressInsightList
}

var map_MachineConfigPoolProgressInsightSpec = map[string]string{
	"": "MachineConfigPoolProgressInsightSpec is empty for now, MachineConfigPoolProgressInsightSpec is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
}

func (MachineConfigPoolProgressInsightSpec) SwaggerDoc() map[string]string {
	return map_MachineConfigPoolProgressInsightSpec
}

var map_MachineConfigPoolProgressInsightStatus = map[string]string{
	"":           "MachineConfigPoolProgressInsightStatus reports the state of a MachineConfigPool resource (which represents a pool of nodes update in standalone clusters), during a cluster update.",
	"conditions": "conditions provide details about the machine config pool update. It contains at most 10 items. Known conditions are: - Updating: whether the pool is updating; When Updating=False, the reason field can be Pending, Updated or Excluded",
	"name":       "name is the name of the machine config pool",
	"resource":   "resource is the MachineConfigPool resource that represents the pool",
	"scopeType":  "scopeType describes whether the pool is a control plane or a worker pool",
	"assessment": "assessment is the assessment of the machine config pool update process. Valid values are: Pending, Completed, Degraded, Excluded, Progressing",
	"completion": "completion is a percentage of the update completion (0-100)",
	"summaries":  "summaries is a list of counts of nodes matching certain criteria (e.g. updated, degraded, etc.). Maximum 16 items can be listed.",
}

func (MachineConfigPoolProgressInsightStatus) SwaggerDoc() map[string]string {
	return map_MachineConfigPoolProgressInsightStatus
}

var map_NodeSummary = map[string]string{
	"":      "NodeSummary is a count of nodes matching certain criteria (e.g. updated, degraded, etc.)",
	"type":  "type is the type of the summary. Valid values are: Total, Available, Progressing, Outdated, Draining, Excluded, Degraded The summaries are not exclusive, a single node may be counted in multiple summaries.",
	"count": "count is the number of nodes matching the criteria, between 0 and 1024",
}

func (NodeSummary) SwaggerDoc() map[string]string {
	return map_NodeSummary
}

var map_NodeProgressInsight = map[string]string{
	"":         "NodeProgressInsight reports the state of a Node during the update\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support. NodeProgressInsight reports the state of a Node during the update",
	"metadata": "metadata is standard Kubernetes object metadata",
	"spec":     "spec is empty for now, NodeProgressInsight is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
	"status":   "status exposes the health and status of the ongoing cluster update",
}

func (NodeProgressInsight) SwaggerDoc() map[string]string {
	return map_NodeProgressInsight
}

var map_NodeProgressInsightList = map[string]string{
	"":         "NodeProgressInsightList is a list of NodeProgressInsightList resources\n\nCompatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"metadata": "metadata is standard Kubernetes object metadata",
	"items":    "items is a list of NodeProgressInsight resources",
}

func (NodeProgressInsightList) SwaggerDoc() map[string]string {
	return map_NodeProgressInsightList
}

var map_NodeProgressInsightSpec = map[string]string{
	"": "NodeProgressInsightSpec is empty for now, NodeProgressInsightSpec is purely status-reporting API. In the future spec may be used to hold configuration to drive what information is surfaced and how",
}

func (NodeProgressInsightSpec) SwaggerDoc() map[string]string {
	return map_NodeProgressInsightSpec
}

var map_NodeProgressInsightStatus = map[string]string{
	"":                    "NodeProgressInsightStatus reports the state of a Node during the update",
	"conditions":          "conditions provides details about the control plane update. Known conditions are: - Updating: whether the Node is updating; When Updating=False, the reason field can be Updated, Pending, or Paused. When Updating=True, the reason field can be Draining, Updating, or Rebooting - Available: whether the Node is available (accepting workloads) - Degraded: whether the Node is degraded (problem observed)",
	"name":                "name is the name of the node",
	"resource":            "resource is the Node resource that represents the node",
	"poolResource":        "poolResource is the resource that represents the pool the node is a member of",
	"scopeType":           "scopeType describes whether the node belongs to control plane or a worker pool",
	"version":             "version is the version of the node, when known",
	"estimatedToComplete": "estimatedToComplete is the estimated time to complete the update, when known",
	"message":             "message is a short human-readable message about the node update status. It must be shorter than 100 characters.",
}

func (NodeProgressInsightStatus) SwaggerDoc() map[string]string {
	return map_NodeProgressInsightStatus
}

// AUTO-GENERATED FUNCTIONS END HERE
