apiVersion: apiextensions.k8s.io/v1 # Hack because controller-gen complains if we don't have this
name: "[Stable] Example API"
crd: 0000_50_my-operator_01_stableconfigtypes-Default.crd.yaml
tests:
  onCreate:
  - name: Should persist stable fields
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        stableField: "Allowed"
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        stableField: "Allowed"
        immutableField: foo
  - name: Should not persist a tech preview field
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        coolNewField: "Invalid"
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        immutableField: foo
  - name: With an EvolvingUnion, Should allow an empty enum value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: ""
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: ""
        immutableField: foo
  - name: With a Set, basic test
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        set: 
          - "Foo"
          - "Bar"
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        set: 
          - "Foo"
          - "Bar"
        immutableField: foo
  - name: With a Set, invalid value in the Set
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        set: 
          - "Invalid value"
          - "Bar"
        immutableField: foo
    expectedError: "Unsupported value: \"Invalid value\": supported values: \"Foo\", \"Bar\", \"Baz\", \"Qux\", \"Corge\""
  - name: With a Set, repeating value in the Set
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        set: 
          - "Foo"
          - "Bar"
          - "Foo"
        immutableField: foo
    expectedError: "Duplicate value: \"Foo\", spec.set: Invalid value: \"array\": failed rule: self.all(x,self.exists_one(y,x == y))]"
  - name: With an EvolvingUnion, Should allow a Stable enum value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: StableValue
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: StableValue
        immutableField: foo
  - name: With an EvolvingUnion, Should not allow a TechPreview enum value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        evolvingUnion:
          type: TechPreviewOnlyValue
        immutableField: foo
    expectedError: "spec.evolvingUnion.type: Unsupported value: \"TechPreviewOnlyValue\": supported values: \"\", \"StableValue\""
  - name: With an CEL validated Discrminated union, should allow an empty member with the empty type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: EmptyMember
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: EmptyMember
        immutableField: foo
  - name: With an CEL validated Discrminated union, should allow an empty member with the empty type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: EmptyMember
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: EmptyMember
        immutableField: foo
  - name: With an CEL validated Discrminated union, should allow a required member with the required type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
          requiredMember: foo
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
          requiredMember: foo
        immutableField: foo
  - name: With an CEL validated Discrminated union, should not allow omitting required member with the required type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
        immutableField: foo
    expectedError: "Invalid value: \"object\": requiredMember is required when type is RequiredMember, and forbidden otherwise"
  - name: With an CEL validated Discrminated union, should not allow the required member without the required type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
          requiredMember: foo
        immutableField: foo
    expectedError: "Invalid value: \"object\": requiredMember is required when type is RequiredMember, and forbidden otherwise"
  - name: With an CEL validated Discrminated union, should not allow the optional member with the required type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
          requiredMember: foo
          optionalMember: foo
        immutableField: foo
    expectedError: "Invalid value: \"object\": optionalMember is forbidden when type is not OptionalMember"
  - name: With an CEL validated Discrminated union, should allow an optional member with the optional type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
          optionalMember: foo
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
          optionalMember: foo
        immutableField: foo
  - name: With an CEL validated Discrminated union, should allow omitting the optional member with the optional type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
        immutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
        immutableField: foo
  - name: With an CEL validated Discrminated union, should not allow the optional member without the optional type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: RequiredMember
          optionalMember: foo
        immutableField: foo
    expectedError: "Invalid value: \"object\": optionalMember is forbidden when type is not OptionalMember"
  - name: With an CEL validated Discrminated union, should not allow the required member with the optional type value
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        celUnion:
          type: OptionalMember
          requiredMember: foo
        immutableField: foo
    expectedError: "Invalid value: \"object\": requiredMember is required when type is RequiredMember, and forbidden otherwise"
  onUpdate:
  - name: Should not allow changing an immutable field
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        immutableField: foo
    updated: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        immutableField: bar
    expectedError: "spec.immutableField: Invalid value: \"string\": immutableField is immutable"
  - name: Should allow setting the optional immutable field
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        immutableField: foo
    updated: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        immutableField: foo
        optionalImmutableField: foo
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        immutableField: foo
        optionalImmutableField: foo
  - name: Should not allow changing the optional immutable field
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        immutableField: foo
        optionalImmutableField: foo
    updated: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      spec:
        immutableField: foo
        optionalImmutableField: bar
    expectedError: "spec.optionalImmutableField: Invalid value: \"string\": optionalImmutableField is immutable once set"
  - name: Should allow setting an immutable status field
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
    updated: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      status:
        immutableField: bar
    expected: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      status:
        immutableField: bar
  - name: Should not allow changing an immutable status field
    initial: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      status:
        immutableField: foo
    updated: |
      apiVersion: example.openshift.io/v1
      kind: StableConfigType
      status:
        immutableField: bar
    expectedStatusError: "status.immutableField: Invalid value: \"string\": immutableField is immutable"
